---
# tasks file for openvpn_deploy

- block:
    - name: Update deb-based system
      apt:
        name: '*'
        state: latest
        update_cache: true

    - name: Install Uncomplicated Firewall, OpenVPN and EasyRSA
      apt:
        name:
          - ufw
          - openvpn
          - easy-rsa
        state: latest
        update_cache: true

    - name: Symlink EasyRSA to /usr/bin
      file:
        src: /usr/share/easy-rsa/easyrsa
        dest: /usr/bin/easyrsa
        state: link

    - name: Set ipv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        state: present
        reload: true

    - name: Get default interface name
      shell: ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1
      register: default_interface

    - name: Add before.rules to ufw
      blockinfile:
        path: /etc/ufw/before.rules
        insertbefore: BOF
        block: |
          *nat
          :POSTROUTING ACCEPT [0:0]
          -A POSTROUTING -s 10.8.0.0/8 -o {{ default_interface.stdout }} -j MASQUERADE
          COMMIT

    - name: set ACCEPT to DEFAULT_FORWARD_POLICY
      replace:
        path: /etc/default/ufw
        regexp: (DEFAULT_FORWARD_POLICY=).*
        replace: \1"ACCEPT"

    - name: Allow SSH
      ufw:
        state: enabled
        rule: allow
        port: ssh

    - name: Allow OpenVPN
      ufw:
        rule: allow
        port: 1194
        proto: udp

  become: true
  when: ansible_pkg_mgr == "apt"

- block:
    - name: Create easyrsa dir
      file:
        path: '{{ server_easyrsa_path }}'
        state: directory
        mode: 0700

    - name: Build Easy RSA docker container
      local_action:
        module: docker_image
        name: easyrsa
        tag: easyrsa
        build:
          path: '{{ local_easyrsa_path }}'
        source: build

    - name: Build CA on local machine
      local_action:
        module: docker_container
        name: easyrsa
        image: easyrsa:latest
        volumes:
          - '{{ local_easyrsa_path }}/ca:/home/easyrsa/ca'
        env:
          SERVER_NAME: '{{ server_name }}'
        command: build_ca

    - name: Generate server PKI
      shell:
        cmd: easyrsa init-pki
        chdir: '{{ server_easyrsa_path }}'
        creates: '{{ server_pki_path }}/safessl-easyrsa.cnf'

    - name: Apply config for EasyRSA
      template:
        src: vars.j2
        dest: '{{ server_pki_path }}/vars'

    - name: Generate server certificate
      shell:
        cmd: easyrsa --batch gen-req {{ server_name }} nopass
        chdir: '{{ server_easyrsa_path }}'
        creates: '{{ server_cert_path }}/{{ server_cert }}'

    - name: Send CA cert to server
      copy:
        src: '{{ local_pki_path }}/{{ ca_cert }}'
        dest: '{{ server_cert_path }}/'
        mode: '0400'

    - name: Send req to CA on local machine
      fetch:
        src: '{{ server_req_path }}/{{ server_req }}'
        dest: '{{ local_req_path }}/'
        flat: true

    - name: Sign server cert req
      local_action:
        module: docker_container
        name: easyrsa
        image: easyrsa
        volumes:
          - '{{ local_easyrsa_path }}/ca:/home/easyrsa/ca'
        env:
          SERVER_NAME: '{{ server_name }}'
        command: sign_server

    - name: Return server cert
      copy:
        src: '{{ local_cert_path }}/{{ server_cert }}'
        dest: '{{ server_cert_path }}/'
        mode: '0400'

    - name: Generate CRL file
      local_action:
        module: docker_container
        name: easyrsa
        image: easyrsa:latest
        volumes:
          - '{{ local_easyrsa_path }}/ca:/home/easyrsa/ca'
        command: gen_crl

    - name: Send CRL to server
      copy:
        src: '{{ local_pki_path }}/{{ crl_pem }}'
        dest: '{{ server_pki_path }}/'
        mode: '0400'

  become: false

- block:
    - name: Gen HMAC signature
      shell:
        cmd: openvpn --genkey secret {{ ta_key }}
        chdir: '{{ server_pki_path }}'
        creates: '{{ server_pki_path }}/{{ ta_key }}'

    - name: Copy keys to OpenVPN directory
      copy:
        src: '{{ item }}'
        dest: '{{ server_openvpn_path }}/'
        mode: '0400'
        remote_src: true
      with_items:
        - '{{ server_pki_path }}/{{ ta_key }}'
        - '{{ server_key_path }}/{{ server_key }}'

    - name: Copy certs to OpenVPN directory
      copy:
        src: '{{ item }}'
        dest: '{{ server_openvpn_path }}/'
        mode: '0600'
        remote_src: true
      with_items:
        - '{{ server_cert_path }}/{{ ca_cert }}'
        - '{{ server_cert_path }}/{{ server_cert }}'
        - '{{ server_pki_path }}/{{ crl_pem }}'

    - name: Copy server config
      template:
        src: server.j2
        dest: '{{ server_openvpn_path }}/{{ server_conf }}'
        mode: '0600'
      notify: Restart OpenVPN

    - name: Send HMAC key to local machine
      fetch:
        src: '{{ server_pki_path }}/{{ ta_key }}'
        dest: '{{ local_pki_path }}/'
        flat: true

  become: true
